{"id":"oWqA","dependencies":[{"name":"C:\\projects\\stud-test\\package.json","includedInParent":true,"mtime":1672313724264},{"name":"C:\\projects\\stud-test\\node_modules\\yup\\package.json","includedInParent":true,"mtime":1666601417056},{"name":"./util/isSchema","loc":{"line":1,"column":21,"index":21},"parent":"C:\\projects\\stud-test\\node_modules\\yup\\es\\Lazy.js","resolved":"C:\\projects\\stud-test\\node_modules\\yup\\es\\util\\isSchema.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = create;\nexports.default = void 0;\n\nvar _isSchema = _interopRequireDefault(require(\"./util/isSchema\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction create(builder) {\n  return new Lazy(builder);\n}\n\nvar Lazy = /*#__PURE__*/function () {\n  function Lazy(builder) {\n    var _this = this;\n\n    _classCallCheck(this, Lazy);\n\n    this.type = 'lazy';\n    this.__isYupSchema__ = true;\n    this.__inputType = void 0;\n    this.__outputType = void 0;\n\n    this._resolve = function (value) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var schema = _this.builder(value, options);\n\n      if (!(0, _isSchema.default)(schema)) throw new TypeError('lazy() functions must return a valid schema');\n      return schema.resolve(options);\n    };\n\n    this.builder = builder;\n  }\n\n  _createClass(Lazy, [{\n    key: \"resolve\",\n    value: function resolve(options) {\n      return this._resolve(options.value, options);\n    }\n  }, {\n    key: \"cast\",\n    value: function cast(value, options) {\n      return this._resolve(value, options).cast(value, options);\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(value, options, maybeCb) {\n      // @ts-expect-error missing public callback on type\n      return this._resolve(value, options).validate(value, options, maybeCb);\n    }\n  }, {\n    key: \"validateSync\",\n    value: function validateSync(value, options) {\n      return this._resolve(value, options).validateSync(value, options);\n    }\n  }, {\n    key: \"validateAt\",\n    value: function validateAt(path, value, options) {\n      return this._resolve(value, options).validateAt(path, value, options);\n    }\n  }, {\n    key: \"validateSyncAt\",\n    value: function validateSyncAt(path, value, options) {\n      return this._resolve(value, options).validateSyncAt(path, value, options);\n    }\n  }, {\n    key: \"describe\",\n    value: function describe() {\n      return null;\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(value, options) {\n      return this._resolve(value, options).isValid(value, options);\n    }\n  }, {\n    key: \"isValidSync\",\n    value: function isValidSync(value, options) {\n      return this._resolve(value, options).isValidSync(value, options);\n    }\n  }]);\n\n  return Lazy;\n}();\n\nvar _default = Lazy;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"07bfdacef7b89b6f0101ad8e09f1679b","cacheData":{"env":{}}}