{"id":"BBSC","dependencies":[{"name":"C:\\projects\\stud-test\\package.json","includedInParent":true,"mtime":1672313724264},{"name":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\utils\\package.json","includedInParent":true,"mtime":1666601424813},{"name":"@babel/runtime/helpers/esm/extends","loc":{"line":1,"column":21,"index":21},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\utils\\mergeSlotProps.js","resolved":"C:\\projects\\stud-test\\node_modules\\@babel\\runtime\\helpers\\esm\\extends.js"},{"name":"clsx","loc":{"line":2,"column":17,"index":76},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\utils\\mergeSlotProps.js","resolved":"C:\\projects\\stud-test\\node_modules\\clsx\\dist\\clsx.m.js"},{"name":"./extractEventHandlers","loc":{"line":3,"column":33,"index":117},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\utils\\mergeSlotProps.js","resolved":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\utils\\extractEventHandlers.js"},{"name":"./omitEventHandlers","loc":{"line":4,"column":30,"index":173},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\utils\\mergeSlotProps.js","resolved":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\utils\\omitEventHandlers.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = mergeSlotProps;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/extends\"));\n\nvar _clsx = _interopRequireDefault(require(\"clsx\"));\n\nvar _extractEventHandlers = _interopRequireDefault(require(\"./extractEventHandlers\"));\n\nvar _omitEventHandlers = _interopRequireDefault(require(\"./omitEventHandlers\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Merges the slot component internal props (usually coming from a hook)\n * with the externally provided ones.\n *\n * The merge order is (the latter overrides the former):\n * 1. The internal props (specified as a getter function to work with get*Props hook result)\n * 2. Additional props (specified internally on an unstyled component)\n * 3. External props specified on the owner component. These should only be used on a root slot.\n * 4. External props specified in the `componentsProps.*` prop.\n * 5. The `className` prop - combined from all the above.\n * @param parameters\n * @returns\n */\nfunction mergeSlotProps(parameters) {\n  const {\n    getSlotProps,\n    additionalProps,\n    externalSlotProps,\n    externalForwardedProps,\n    className\n  } = parameters;\n\n  if (!getSlotProps) {\n    // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,\n    // so we can simply merge all the props without having to worry about extracting event handlers.\n    const joinedClasses = (0, _clsx.default)(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);\n    const mergedStyle = (0, _extends2.default)({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);\n    const props = (0, _extends2.default)({}, additionalProps, externalForwardedProps, externalSlotProps);\n\n    if (joinedClasses.length > 0) {\n      props.className = joinedClasses;\n    }\n\n    if (Object.keys(mergedStyle).length > 0) {\n      props.style = mergedStyle;\n    }\n\n    return {\n      props,\n      internalRef: undefined\n    };\n  } // In this case, getSlotProps is responsible for calling the external event handlers.\n  // We don't need to include them in the merged props because of this.\n\n\n  const eventHandlers = (0, _extractEventHandlers.default)((0, _extends2.default)({}, externalForwardedProps, externalSlotProps));\n  const componentsPropsWithoutEventHandlers = (0, _omitEventHandlers.default)(externalSlotProps);\n  const otherPropsWithoutEventHandlers = (0, _omitEventHandlers.default)(externalForwardedProps);\n  const internalSlotProps = getSlotProps(eventHandlers); // The order of classes is important here.\n  // Emotion (that we use in libraries consuming MUI Base) depends on this order\n  // to properly override style. It requires the most important classes to be last\n  // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.\n\n  const joinedClasses = (0, _clsx.default)(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);\n  const mergedStyle = (0, _extends2.default)({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);\n  const props = (0, _extends2.default)({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);\n\n  if (joinedClasses.length > 0) {\n    props.className = joinedClasses;\n  }\n\n  if (Object.keys(mergedStyle).length > 0) {\n    props.style = mergedStyle;\n  }\n\n  return {\n    props,\n    internalRef: internalSlotProps.ref\n  };\n}"},"sourceMaps":null,"error":null,"hash":"5f5914374a8b5a7c0666600e2be3c1ea","cacheData":{"env":{}}}