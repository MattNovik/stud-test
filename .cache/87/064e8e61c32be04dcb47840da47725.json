{"id":"e7Pz","dependencies":[{"name":"C:\\projects\\stud-test\\package.json","includedInParent":true,"mtime":1672313724264},{"name":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\SliderUnstyled\\package.json","includedInParent":true,"mtime":1666601424770},{"name":"@babel/runtime/helpers/esm/extends","loc":{"line":1,"column":21,"index":21},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\SliderUnstyled\\SliderUnstyled.js","resolved":"C:\\projects\\stud-test\\node_modules\\@babel\\runtime\\helpers\\esm\\extends.js"},{"name":"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose","loc":{"line":2,"column":42,"index":101},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\SliderUnstyled\\SliderUnstyled.js","resolved":"C:\\projects\\stud-test\\node_modules\\@babel\\runtime\\helpers\\esm\\objectWithoutPropertiesLoose.js"},{"name":"react","loc":{"line":4,"column":23,"index":544},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\SliderUnstyled\\SliderUnstyled.js","resolved":"C:\\projects\\stud-test\\node_modules\\react\\index.js"},{"name":"prop-types","loc":{"line":5,"column":22,"index":575},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\SliderUnstyled\\SliderUnstyled.js","resolved":"C:\\projects\\stud-test\\node_modules\\prop-types\\index.js"},{"name":"clsx","loc":{"line":6,"column":17,"index":606},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\SliderUnstyled\\SliderUnstyled.js","resolved":"C:\\projects\\stud-test\\node_modules\\clsx\\dist\\clsx.m.js"},{"name":"@mui/utils","loc":{"line":7,"column":31,"index":645},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\SliderUnstyled\\SliderUnstyled.js","resolved":"C:\\projects\\stud-test\\node_modules\\@mui\\utils\\esm\\index.js"},{"name":"../utils/isHostComponent","loc":{"line":8,"column":28,"index":687},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\SliderUnstyled\\SliderUnstyled.js","resolved":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\utils\\isHostComponent.js"},{"name":"../composeClasses","loc":{"line":9,"column":27,"index":742},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\SliderUnstyled\\SliderUnstyled.js","resolved":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\composeClasses\\index.js"},{"name":"./sliderUnstyledClasses","loc":{"line":10,"column":38,"index":801},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\SliderUnstyled\\SliderUnstyled.js","resolved":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\SliderUnstyled\\sliderUnstyledClasses.js"},{"name":"./SliderValueLabelUnstyled","loc":{"line":11,"column":37,"index":865},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\SliderUnstyled\\SliderUnstyled.js","resolved":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\SliderUnstyled\\SliderValueLabelUnstyled.js"},{"name":"./useSlider","loc":{"line":12,"column":42,"index":937},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\SliderUnstyled\\SliderUnstyled.js","resolved":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\SliderUnstyled\\useSlider.js"},{"name":"../utils/useSlotProps","loc":{"line":13,"column":25,"index":977},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\SliderUnstyled\\SliderUnstyled.js","resolved":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\utils\\useSlotProps.js"},{"name":"react/jsx-runtime","loc":{"line":15,"column":30,"index":1081},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\base\\SliderUnstyled\\SliderUnstyled.js","resolved":"C:\\projects\\stud-test\\node_modules\\react\\jsx-runtime.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _clsx = _interopRequireDefault(require(\"clsx\"));\n\nvar _utils = require(\"@mui/utils\");\n\nvar _isHostComponent = _interopRequireDefault(require(\"../utils/isHostComponent\"));\n\nvar _composeClasses = _interopRequireDefault(require(\"../composeClasses\"));\n\nvar _sliderUnstyledClasses = require(\"./sliderUnstyledClasses\");\n\nvar _SliderValueLabelUnstyled = _interopRequireDefault(require(\"./SliderValueLabelUnstyled\"));\n\nvar _useSlider = _interopRequireWildcard(require(\"./useSlider\"));\n\nvar _useSlotProps = _interopRequireDefault(require(\"../utils/useSlotProps\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst _excluded = [\"aria-label\", \"aria-valuetext\", \"className\", \"component\", \"classes\", \"disableSwap\", \"disabled\", \"getAriaLabel\", \"getAriaValueText\", \"marks\", \"max\", \"min\", \"name\", \"onChange\", \"onChangeCommitted\", \"orientation\", \"scale\", \"step\", \"tabIndex\", \"track\", \"value\", \"valueLabelDisplay\", \"valueLabelFormat\", \"isRtl\", \"components\", \"componentsProps\"];\n\nconst Identity = x => x;\n\nconst useUtilityClasses = ownerState => {\n  const {\n    disabled,\n    dragging,\n    marked,\n    orientation,\n    track,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', dragging && 'dragging', marked && 'marked', orientation === 'vertical' && 'vertical', track === 'inverted' && 'trackInverted', track === false && 'trackFalse'],\n    rail: ['rail'],\n    track: ['track'],\n    mark: ['mark'],\n    markActive: ['markActive'],\n    markLabel: ['markLabel'],\n    markLabelActive: ['markLabelActive'],\n    valueLabel: ['valueLabel'],\n    thumb: ['thumb', disabled && 'disabled'],\n    active: ['active'],\n    disabled: ['disabled'],\n    focusVisible: ['focusVisible']\n  };\n  return (0, _composeClasses.default)(slots, _sliderUnstyledClasses.getSliderUtilityClass, classes);\n};\n\nconst Forward = ({\n  children\n}) => children;\n\nconst SliderUnstyled = /*#__PURE__*/React.forwardRef(function SliderUnstyled(props, ref) {\n  var _ref, _components$Rail, _components$Track, _components$Thumb, _components$ValueLabe, _components$Mark, _components$MarkLabel;\n\n  const {\n    'aria-label': ariaLabel,\n    'aria-valuetext': ariaValuetext,\n    className,\n    component,\n    classes: classesProp,\n    disableSwap = false,\n    disabled = false,\n    getAriaLabel,\n    getAriaValueText,\n    marks: marksProp = false,\n    max = 100,\n    min = 0,\n    orientation = 'horizontal',\n    scale = Identity,\n    step = 1,\n    track = 'normal',\n    valueLabelDisplay = 'off',\n    valueLabelFormat = Identity,\n    isRtl = false,\n    components = {},\n    componentsProps = {}\n  } = props,\n        other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded); // all props with defaults\n  // consider extracting to hook an reusing the lint rule for the varints\n\n  const ownerState = (0, _extends2.default)({}, props, {\n    marks: marksProp,\n    classes: classesProp,\n    disabled,\n    isRtl,\n    max,\n    min,\n    orientation,\n    scale,\n    step,\n    track,\n    valueLabelDisplay,\n    valueLabelFormat\n  });\n  const {\n    axisProps,\n    getRootProps,\n    getHiddenInputProps,\n    getThumbProps,\n    open,\n    active,\n    axis,\n    range,\n    focusedThumbIndex,\n    dragging,\n    marks,\n    values,\n    trackOffset,\n    trackLeap\n  } = (0, _useSlider.default)((0, _extends2.default)({}, ownerState, {\n    ref\n  }));\n  ownerState.marked = marks.length > 0 && marks.some(mark => mark.label);\n  ownerState.dragging = dragging;\n  ownerState.focusedThumbIndex = focusedThumbIndex;\n  const classes = useUtilityClasses(ownerState);\n  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'span';\n  const rootProps = (0, _useSlotProps.default)({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: componentsProps.root,\n    externalForwardedProps: other,\n    ownerState,\n    className: [classes.root, className]\n  });\n  const Rail = (_components$Rail = components.Rail) != null ? _components$Rail : 'span';\n  const railProps = (0, _useSlotProps.default)({\n    elementType: Rail,\n    externalSlotProps: componentsProps.rail,\n    ownerState,\n    className: classes.rail\n  });\n  const Track = (_components$Track = components.Track) != null ? _components$Track : 'span';\n  const trackProps = (0, _useSlotProps.default)({\n    elementType: Track,\n    externalSlotProps: componentsProps.track,\n    additionalProps: {\n      style: (0, _extends2.default)({}, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap))\n    },\n    ownerState,\n    className: classes.track\n  });\n  const Thumb = (_components$Thumb = components.Thumb) != null ? _components$Thumb : 'span';\n  const thumbProps = (0, _useSlotProps.default)({\n    elementType: Thumb,\n    getSlotProps: getThumbProps,\n    externalSlotProps: componentsProps.thumb,\n    ownerState\n  });\n  const ValueLabel = (_components$ValueLabe = components.ValueLabel) != null ? _components$ValueLabe : _SliderValueLabelUnstyled.default;\n  const valueLabelProps = (0, _useSlotProps.default)({\n    elementType: ValueLabel,\n    externalSlotProps: componentsProps.valueLabel,\n    ownerState\n  });\n  const Mark = (_components$Mark = components.Mark) != null ? _components$Mark : 'span';\n  const markProps = (0, _useSlotProps.default)({\n    elementType: Mark,\n    externalSlotProps: componentsProps.mark,\n    ownerState,\n    className: classes.mark\n  });\n  const MarkLabel = (_components$MarkLabel = components.MarkLabel) != null ? _components$MarkLabel : 'span';\n  const markLabelProps = (0, _useSlotProps.default)({\n    elementType: MarkLabel,\n    externalSlotProps: componentsProps.markLabel,\n    ownerState\n  });\n  const Input = components.Input || 'input';\n  const inputProps = (0, _useSlotProps.default)({\n    elementType: Input,\n    getSlotProps: getHiddenInputProps,\n    externalSlotProps: componentsProps.input,\n    ownerState\n  });\n  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(Root, (0, _extends2.default)({}, rootProps, {\n    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(Rail, (0, _extends2.default)({}, railProps)), /*#__PURE__*/(0, _jsxRuntime.jsx)(Track, (0, _extends2.default)({}, trackProps)), marks.filter(mark => mark.value >= min && mark.value <= max).map((mark, index) => {\n      const percent = (0, _useSlider.valueToPercent)(mark.value, min, max);\n      const style = axisProps[axis].offset(percent);\n      let markActive;\n\n      if (track === false) {\n        markActive = values.indexOf(mark.value) !== -1;\n      } else {\n        markActive = track === 'normal' && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === 'inverted' && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);\n      }\n\n      return /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {\n        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(Mark, (0, _extends2.default)({\n          \"data-index\": index\n        }, markProps, !(0, _isHostComponent.default)(Mark) && {\n          markActive\n        }, {\n          style: (0, _extends2.default)({}, style, markProps.style),\n          className: (0, _clsx.default)(markProps.className, markActive && classes.markActive)\n        })), mark.label != null ? /*#__PURE__*/(0, _jsxRuntime.jsx)(MarkLabel, (0, _extends2.default)({\n          \"aria-hidden\": true,\n          \"data-index\": index\n        }, markLabelProps, !(0, _isHostComponent.default)(MarkLabel) && {\n          markLabelActive: markActive\n        }, {\n          style: (0, _extends2.default)({}, style, markLabelProps.style),\n          className: (0, _clsx.default)(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),\n          children: mark.label\n        })) : null]\n      }, mark.value);\n    }), values.map((value, index) => {\n      const percent = (0, _useSlider.valueToPercent)(value, min, max);\n      const style = axisProps[axis].offset(percent);\n      const ValueLabelComponent = valueLabelDisplay === 'off' ? Forward : ValueLabel;\n      return /*#__PURE__*/(0, _jsxRuntime.jsx)(React.Fragment, {\n        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ValueLabelComponent, (0, _extends2.default)({}, !(0, _isHostComponent.default)(ValueLabelComponent) && {\n          valueLabelFormat,\n          valueLabelDisplay,\n          value: typeof valueLabelFormat === 'function' ? valueLabelFormat(scale(value), index) : valueLabelFormat,\n          index,\n          open: open === index || active === index || valueLabelDisplay === 'on',\n          disabled\n        }, valueLabelProps, {\n          className: (0, _clsx.default)(classes.valueLabel, valueLabelProps.className),\n          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Thumb, (0, _extends2.default)({\n            \"data-index\": index,\n            \"data-focusvisible\": focusedThumbIndex === index\n          }, thumbProps, {\n            className: (0, _clsx.default)(classes.thumb, thumbProps.className, active === index && classes.active, focusedThumbIndex === index && classes.focusVisible),\n            style: (0, _extends2.default)({}, style, {\n              pointerEvents: disableSwap && active !== index ? 'none' : undefined\n            }, thumbProps.style),\n            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Input, (0, _extends2.default)({\n              \"data-index\": index,\n              \"aria-label\": getAriaLabel ? getAriaLabel(index) : ariaLabel,\n              \"aria-valuenow\": scale(value),\n              \"aria-valuetext\": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,\n              value: values[index]\n            }, inputProps))\n          }))\n        }))\n      }, index);\n    })]\n  }));\n});\n\"production\" !== \"production\" ? SliderUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The label of the slider.\n   */\n  'aria-label': (0, _utils.chainPropTypes)(_propTypes.default.string, props => {\n    const range = Array.isArray(props.value || props.defaultValue);\n\n    if (range && props['aria-label'] != null) {\n      return new Error('MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * The id of the element containing a label for the slider.\n   */\n  'aria-labelledby': _propTypes.default.string,\n\n  /**\n   * A string value that provides a user-friendly name for the current value of the slider.\n   */\n  'aria-valuetext': (0, _utils.chainPropTypes)(_propTypes.default.string, props => {\n    const range = Array.isArray(props.value || props.defaultValue);\n\n    if (range && props['aria-valuetext'] != null) {\n      return new Error('MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * @ignore\n   */\n  children: _propTypes.default.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: _propTypes.default.object,\n\n  /**\n   * @ignore\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: _propTypes.default.elementType,\n\n  /**\n   * The components used for each slot inside the Slider.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: _propTypes.default.shape({\n    Input: _propTypes.default.elementType,\n    Mark: _propTypes.default.elementType,\n    MarkLabel: _propTypes.default.elementType,\n    Rail: _propTypes.default.elementType,\n    Root: _propTypes.default.elementType,\n    Thumb: _propTypes.default.elementType,\n    Track: _propTypes.default.elementType,\n    ValueLabel: _propTypes.default.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the Slider.\n   * @default {}\n   */\n  componentsProps: _propTypes.default.shape({\n    input: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),\n    mark: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),\n    markLabel: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),\n    rail: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),\n    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),\n    thumb: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),\n    track: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),\n    valueLabel: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({\n      children: _propTypes.default.element,\n      className: _propTypes.default.string,\n      components: _propTypes.default.shape({\n        Root: _propTypes.default.elementType\n      }),\n      open: _propTypes.default.bool,\n      style: _propTypes.default.object,\n      value: _propTypes.default.number,\n      valueLabelDisplay: _propTypes.default.oneOf(['auto', 'off', 'on'])\n    })])\n  }),\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number]),\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: _propTypes.default.bool,\n\n  /**\n   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.\n   * @default false\n   */\n  disableSwap: _propTypes.default.bool,\n\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.\n   * This is important for screen reader users.\n   * @param {number} index The thumb label's index to format.\n   * @returns {string}\n   */\n  getAriaLabel: _propTypes.default.func,\n\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.\n   * This is important for screen reader users.\n   * @param {number} value The thumb label's value to format.\n   * @param {number} index The thumb label's index to format.\n   * @returns {string}\n   */\n  getAriaValueText: _propTypes.default.func,\n\n  /**\n   * Indicates whether the theme context has rtl direction. It is set automatically.\n   * @default false\n   */\n  isRtl: _propTypes.default.bool,\n\n  /**\n   * Marks indicate predetermined values to which the user can move the slider.\n   * If `true` the marks are spaced according the value of the `step` prop.\n   * If an array, it should contain objects with `value` and an optional `label` keys.\n   * @default false\n   */\n  marks: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.shape({\n    label: _propTypes.default.node,\n    value: _propTypes.default.number.isRequired\n  })), _propTypes.default.bool]),\n\n  /**\n   * The maximum allowed value of the slider.\n   * Should not be equal to min.\n   * @default 100\n   */\n  max: _propTypes.default.number,\n\n  /**\n   * The minimum allowed value of the slider.\n   * Should not be equal to max.\n   * @default 0\n   */\n  min: _propTypes.default.number,\n\n  /**\n   * Name attribute of the hidden `input` element.\n   */\n  name: _propTypes.default.string,\n\n  /**\n   * Callback function that is fired when the slider's value changed.\n   *\n   * @param {Event} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * **Warning**: This is a generic event not a change event.\n   * @param {number | number[]} value The new value.\n   * @param {number} activeThumb Index of the currently moved thumb.\n   */\n  onChange: _propTypes.default.func,\n\n  /**\n   * Callback function that is fired when the `mouseup` is triggered.\n   *\n   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.\n   * @param {number | number[]} value The new value.\n   */\n  onChangeCommitted: _propTypes.default.func,\n\n  /**\n   * The component orientation.\n   * @default 'horizontal'\n   */\n  orientation: _propTypes.default.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * A transformation function, to change the scale of the slider.\n   * @default (x) => x\n   */\n  scale: _propTypes.default.func,\n\n  /**\n   * The granularity with which the slider can step through values. (A \"discrete\" slider.)\n   * The `min` prop serves as the origin for the valid values.\n   * We recommend (max - min) to be evenly divisible by the step.\n   *\n   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.\n   * @default 1\n   */\n  step: _propTypes.default.number,\n\n  /**\n   * Tab index attribute of the hidden `input` element.\n   */\n  tabIndex: _propTypes.default.number,\n\n  /**\n   * The track presentation:\n   *\n   * - `normal` the track will render a bar representing the slider value.\n   * - `inverted` the track will render a bar representing the remaining slider value.\n   * - `false` the track will render without a bar.\n   * @default 'normal'\n   */\n  track: _propTypes.default.oneOf(['inverted', 'normal', false]),\n\n  /**\n   * The value of the slider.\n   * For ranged sliders, provide an array with two values.\n   */\n  value: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number]),\n\n  /**\n   * Controls when the value label is displayed:\n   *\n   * - `auto` the value label will display when the thumb is hovered or focused.\n   * - `on` will display persistently.\n   * - `off` will never display.\n   * @default 'off'\n   */\n  valueLabelDisplay: _propTypes.default.oneOf(['auto', 'off', 'on']),\n\n  /**\n   * The format function the value label's value.\n   *\n   * When a function is provided, it should have the following signature:\n   *\n   * - {number} value The value label's value to format\n   * - {number} index The value label's index to format\n   * @default (x) => x\n   */\n  valueLabelFormat: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string])\n} : void 0;\nvar _default = SliderUnstyled;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"efbe612d6fdd156bb9482272b0ed16be","cacheData":{"env":{"NODE_ENV":"production"}}}