{"id":"ZHiD","dependencies":[{"name":"C:\\projects\\stud-test\\package.json","includedInParent":true,"mtime":1672148335290},{"name":"C:\\projects\\stud-test\\node_modules\\lodash-es\\package.json","includedInParent":true,"mtime":1666601424776},{"name":"./memoize.js","loc":{"line":1,"column":20,"index":20},"parent":"C:\\projects\\stud-test\\node_modules\\lodash-es\\_memoizeCapped.js","resolved":"C:\\projects\\stud-test\\node_modules\\lodash-es\\memoize.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _memoize = _interopRequireDefault(require(\"./memoize.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\n\nfunction memoizeCapped(func) {\n  var result = (0, _memoize.default)(func, function (key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n\n    return key;\n  });\n  var cache = result.cache;\n  return result;\n}\n\nvar _default = memoizeCapped;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"17a7fc3757269855ad7f5968d26a2b2d","cacheData":{"env":{}}}