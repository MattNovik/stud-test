{"id":"s5Dv","dependencies":[{"name":"C:\\projects\\stud-test\\package.json","includedInParent":true,"mtime":1672148335290},{"name":"C:\\projects\\stud-test\\node_modules\\@mui\\utils\\package.json","includedInParent":true,"mtime":1666601420457},{"name":"prop-types","loc":{"line":1,"column":22,"index":22},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\utils\\esm\\elementTypeAcceptingRef.js","resolved":"C:\\projects\\stud-test\\node_modules\\prop-types\\index.js"},{"name":"./chainPropTypes","loc":{"line":2,"column":27,"index":63},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\utils\\esm\\elementTypeAcceptingRef.js","resolved":"C:\\projects\\stud-test\\node_modules\\@mui\\utils\\esm\\chainPropTypes.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _chainPropTypes = _interopRequireDefault(require(\"./chainPropTypes\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isClassComponent(elementType) {\n  // elementType.prototype?.isReactComponent\n  var _elementType$prototyp = elementType.prototype,\n      prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;\n  return Boolean(prototype.isReactComponent);\n}\n\nfunction elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {\n  var propValue = props[propName];\n  var safePropName = propFullName || propName;\n\n  if (propValue == null || // When server-side rendering React doesn't warn either.\n  // This is not an accurate check for SSR.\n  // This is only in place for emotion compat.\n  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.\n  typeof window === 'undefined') {\n    return null;\n  }\n\n  var warningHint;\n  /**\n   * Blacklisting instead of whitelisting\n   *\n   * Blacklisting will miss some components, such as React.Fragment. Those will at least\n   * trigger a warning in React.\n   * We can't whitelist because there is no safe way to detect React.forwardRef\n   * or class components. \"Safe\" means there's no public API.\n   *\n   */\n\n  if (typeof propValue === 'function' && !isClassComponent(propValue)) {\n    warningHint = 'Did you accidentally provide a plain function component instead?';\n  }\n\n  if (warningHint !== undefined) {\n    return new Error(\"Invalid \".concat(location, \" `\").concat(safePropName, \"` supplied to `\").concat(componentName, \"`. \") + \"Expected an element type that can hold a ref. \".concat(warningHint, \" \") + 'For more information see https://mui.com/r/caveat-with-refs-guide');\n  }\n\n  return null;\n}\n\nvar _default = (0, _chainPropTypes.default)(_propTypes.default.elementType, elementTypeAcceptingRef);\n\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"a31648c2687b3d152f81b0e70a285bca","cacheData":{"env":{}}}