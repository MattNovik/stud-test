{"id":"fELs","dependencies":[{"name":"C:\\projects\\stud-test\\package.json","includedInParent":true,"mtime":1672313724264},{"name":"C:\\projects\\stud-test\\node_modules\\lodash-es\\package.json","includedInParent":true,"mtime":1666601424776},{"name":"./_Symbol.js","loc":{"line":1,"column":19,"index":19},"parent":"C:\\projects\\stud-test\\node_modules\\lodash-es\\_baseToString.js","resolved":"C:\\projects\\stud-test\\node_modules\\lodash-es\\_Symbol.js"},{"name":"./_arrayMap.js","loc":{"line":2,"column":21,"index":56},"parent":"C:\\projects\\stud-test\\node_modules\\lodash-es\\_baseToString.js","resolved":"C:\\projects\\stud-test\\node_modules\\lodash-es\\_arrayMap.js"},{"name":"./isArray.js","loc":{"line":3,"column":20,"index":94},"parent":"C:\\projects\\stud-test\\node_modules\\lodash-es\\_baseToString.js","resolved":"C:\\projects\\stud-test\\node_modules\\lodash-es\\isArray.js"},{"name":"./isSymbol.js","loc":{"line":4,"column":21,"index":131},"parent":"C:\\projects\\stud-test\\node_modules\\lodash-es\\_baseToString.js","resolved":"C:\\projects\\stud-test\\node_modules\\lodash-es\\isSymbol.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Symbol = _interopRequireDefault(require(\"./_Symbol.js\"));\n\nvar _arrayMap = _interopRequireDefault(require(\"./_arrayMap.js\"));\n\nvar _isArray = _interopRequireDefault(require(\"./isArray.js\"));\n\nvar _isSymbol = _interopRequireDefault(require(\"./isSymbol.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n/** Used to convert symbols to primitives and strings. */\n\nvar symbolProto = _Symbol.default ? _Symbol.default.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\n\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n\n  if ((0, _isArray.default)(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return (0, _arrayMap.default)(value, baseToString) + '';\n  }\n\n  if ((0, _isSymbol.default)(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n\n  var result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\n\nvar _default = baseToString;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"9c04b5fd6f71209b16d737b5d6a07b8a","cacheData":{"env":{}}}