{"id":"GTw7","dependencies":[{"name":"C:\\projects\\stud-test\\package.json","includedInParent":true,"mtime":1672313724264},{"name":"C:\\projects\\stud-test\\node_modules\\imask\\package.json","includedInParent":true,"mtime":1666601416569},{"name":"../_rollupPluginBabelHelpers-67bba7fb.js","loc":{"line":1,"column":91,"index":91},"parent":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\controls\\html-mask-element.js","resolved":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\_rollupPluginBabelHelpers-67bba7fb.js"},{"name":"./mask-element.js","loc":{"line":2,"column":24,"index":159},"parent":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\controls\\html-mask-element.js","resolved":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\controls\\mask-element.js"},{"name":"../core/holder.js","loc":{"line":3,"column":18,"index":198},"parent":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\controls\\html-mask-element.js","resolved":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\core\\holder.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpers67bba7fb = require(\"../_rollupPluginBabelHelpers-67bba7fb.js\");\n\nvar _maskElement = _interopRequireDefault(require(\"./mask-element.js\"));\n\nvar _holder = _interopRequireDefault(require(\"../core/holder.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Bridge between HTMLElement and {@link Masked} */\nvar HTMLMaskElement = /*#__PURE__*/function (_MaskElement) {\n  (0, _rollupPluginBabelHelpers67bba7fb.d)(HTMLMaskElement, _MaskElement);\n\n  var _super = (0, _rollupPluginBabelHelpers67bba7fb.e)(HTMLMaskElement);\n  /** Mapping between HTMLElement events and mask internal events */\n\n  /** HTMLElement to use mask on */\n\n  /**\n    @param {HTMLInputElement|HTMLTextAreaElement} input\n  */\n\n\n  function HTMLMaskElement(input) {\n    var _this;\n\n    (0, _rollupPluginBabelHelpers67bba7fb.a)(this, HTMLMaskElement);\n    _this = _super.call(this);\n    _this.input = input;\n    _this._handlers = {};\n    return _this;\n  }\n  /** */\n  // $FlowFixMe https://github.com/facebook/flow/issues/2839\n\n\n  (0, _rollupPluginBabelHelpers67bba7fb._)(HTMLMaskElement, [{\n    key: \"rootElement\",\n    get: function get() {\n      var _this$input$getRootNo, _this$input$getRootNo2, _this$input;\n\n      return (_this$input$getRootNo = (_this$input$getRootNo2 = (_this$input = this.input).getRootNode) === null || _this$input$getRootNo2 === void 0 ? void 0 : _this$input$getRootNo2.call(_this$input)) !== null && _this$input$getRootNo !== void 0 ? _this$input$getRootNo : document;\n    }\n    /**\n      Is element in focus\n      @readonly\n    */\n\n  }, {\n    key: \"isActive\",\n    get: function get() {\n      //$FlowFixMe\n      return this.input === this.rootElement.activeElement;\n    }\n    /**\n      Returns HTMLElement selection start\n      @override\n    */\n\n  }, {\n    key: \"_unsafeSelectionStart\",\n    get: function get() {\n      return this.input.selectionStart;\n    }\n    /**\n      Returns HTMLElement selection end\n      @override\n    */\n\n  }, {\n    key: \"_unsafeSelectionEnd\",\n    get: function get() {\n      return this.input.selectionEnd;\n    }\n    /**\n      Sets HTMLElement selection\n      @override\n    */\n\n  }, {\n    key: \"_unsafeSelect\",\n    value: function _unsafeSelect(start, end) {\n      this.input.setSelectionRange(start, end);\n    }\n    /**\n      HTMLElement value\n      @override\n    */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.input.value;\n    },\n    set: function set(value) {\n      this.input.value = value;\n    }\n    /**\n      Binds HTMLElement events to mask internal events\n      @override\n    */\n\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents(handlers) {\n      var _this2 = this;\n\n      Object.keys(handlers).forEach(function (event) {\n        return _this2._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]);\n      });\n    }\n    /**\n      Unbinds HTMLElement events to mask internal events\n      @override\n    */\n\n  }, {\n    key: \"unbindEvents\",\n    value: function unbindEvents() {\n      var _this3 = this;\n\n      Object.keys(this._handlers).forEach(function (event) {\n        return _this3._toggleEventHandler(event);\n      });\n    }\n    /** */\n\n  }, {\n    key: \"_toggleEventHandler\",\n    value: function _toggleEventHandler(event, handler) {\n      if (this._handlers[event]) {\n        this.input.removeEventListener(event, this._handlers[event]);\n        delete this._handlers[event];\n      }\n\n      if (handler) {\n        this.input.addEventListener(event, handler);\n        this._handlers[event] = handler;\n      }\n    }\n  }]);\n  return HTMLMaskElement;\n}(_maskElement.default);\n\nexports.default = HTMLMaskElement;\nHTMLMaskElement.EVENTS_MAP = {\n  selectionChange: 'keydown',\n  input: 'input',\n  drop: 'drop',\n  click: 'click',\n  focus: 'focus',\n  commit: 'blur'\n};\n_holder.default.HTMLMaskElement = HTMLMaskElement;"},"sourceMaps":null,"error":null,"hash":"2a684b7fbe54489d2b4d920b4880c97c","cacheData":{"env":{}}}