{"id":"Axb2","dependencies":[{"name":"C:\\projects\\stud-test\\package.json","includedInParent":true,"mtime":1672148335290},{"name":"C:\\projects\\stud-test\\node_modules\\lodash\\package.json","includedInParent":true,"mtime":1666601426036},{"name":"./memoize","loc":{"line":1,"column":22,"index":22},"parent":"C:\\projects\\stud-test\\node_modules\\lodash\\_memoizeCapped.js","resolved":"C:\\projects\\stud-test\\node_modules\\lodash\\memoize.js"}],"generated":{"js":"var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n"},"sourceMaps":null,"error":null,"hash":"49d35e90376f76178ea655d8b85114ad","cacheData":{"env":{}}}