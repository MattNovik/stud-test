{"id":"x11x","dependencies":[{"name":"C:\\projects\\stud-test\\package.json","includedInParent":true,"mtime":1672313724264},{"name":"C:\\projects\\stud-test\\node_modules\\imask\\package.json","includedInParent":true,"mtime":1666601416569},{"name":"../../_rollupPluginBabelHelpers-67bba7fb.js","loc":{"line":1,"column":87,"index":87},"parent":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\masked\\pattern\\chunk-tail-details.js","resolved":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\_rollupPluginBabelHelpers-67bba7fb.js"},{"name":"../../core/change-details.js","loc":{"line":2,"column":26,"index":160},"parent":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\masked\\pattern\\chunk-tail-details.js","resolved":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\core\\change-details.js"},{"name":"../../core/utils.js","loc":{"line":3,"column":25,"index":217},"parent":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\masked\\pattern\\chunk-tail-details.js","resolved":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\core\\utils.js"},{"name":"../../core/continuous-tail-details.js","loc":{"line":4,"column":34,"index":274},"parent":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\masked\\pattern\\chunk-tail-details.js","resolved":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\core\\continuous-tail-details.js"},{"name":"../../core/holder.js","loc":{"line":5,"column":18,"index":333},"parent":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\masked\\pattern\\chunk-tail-details.js","resolved":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\core\\holder.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpers67bba7fb = require(\"../../_rollupPluginBabelHelpers-67bba7fb.js\");\n\nvar _changeDetails = _interopRequireDefault(require(\"../../core/change-details.js\"));\n\nvar _utils = require(\"../../core/utils.js\");\n\nvar _continuousTailDetails = _interopRequireDefault(require(\"../../core/continuous-tail-details.js\"));\n\nvar _holder = _interopRequireDefault(require(\"../../core/holder.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _excluded = [\"chunks\"];\n\nvar ChunksTailDetails = /*#__PURE__*/function () {\n  /** */\n  function ChunksTailDetails() {\n    var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    (0, _rollupPluginBabelHelpers67bba7fb.a)(this, ChunksTailDetails);\n    this.chunks = chunks;\n    this.from = from;\n  }\n\n  (0, _rollupPluginBabelHelpers67bba7fb._)(ChunksTailDetails, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.chunks.map(String).join('');\n    } // $FlowFixMe no ideas\n\n  }, {\n    key: \"extend\",\n    value: function extend(tailChunk) {\n      if (!String(tailChunk)) return;\n      if ((0, _utils.isString)(tailChunk)) tailChunk = new _continuousTailDetails.default(String(tailChunk));\n      var lastChunk = this.chunks[this.chunks.length - 1];\n      var extendLast = lastChunk && ( // if stops are same or tail has no stop\n      lastChunk.stop === tailChunk.stop || tailChunk.stop == null) && // if tail chunk goes just after last chunk\n      tailChunk.from === lastChunk.from + lastChunk.toString().length;\n\n      if (tailChunk instanceof _continuousTailDetails.default) {\n        // check the ability to extend previous chunk\n        if (extendLast) {\n          // extend previous chunk\n          lastChunk.extend(tailChunk.toString());\n        } else {\n          // append new chunk\n          this.chunks.push(tailChunk);\n        }\n      } else if (tailChunk instanceof ChunksTailDetails) {\n        if (tailChunk.stop == null) {\n          // unwrap floating chunks to parent, keeping `from` pos\n          var firstTailChunk;\n\n          while (tailChunk.chunks.length && tailChunk.chunks[0].stop == null) {\n            firstTailChunk = tailChunk.chunks.shift();\n            firstTailChunk.from += tailChunk.from;\n            this.extend(firstTailChunk);\n          }\n        } // if tail chunk still has value\n\n\n        if (tailChunk.toString()) {\n          // if chunks contains stops, then popup stop to container\n          tailChunk.stop = tailChunk.blockIndex;\n          this.chunks.push(tailChunk);\n        }\n      }\n    }\n  }, {\n    key: \"appendTo\",\n    value: function appendTo(masked) {\n      // $FlowFixMe\n      if (!(masked instanceof _holder.default.MaskedPattern)) {\n        var tail = new _continuousTailDetails.default(this.toString());\n        return tail.appendTo(masked);\n      }\n\n      var details = new _changeDetails.default();\n\n      for (var ci = 0; ci < this.chunks.length && !details.skip; ++ci) {\n        var chunk = this.chunks[ci];\n\n        var lastBlockIter = masked._mapPosToBlock(masked.value.length);\n\n        var stop = chunk.stop;\n        var chunkBlock = void 0;\n\n        if (stop != null && ( // if block not found or stop is behind lastBlock\n        !lastBlockIter || lastBlockIter.index <= stop)) {\n          if (chunk instanceof ChunksTailDetails || // for continuous block also check if stop is exist\n          masked._stops.indexOf(stop) >= 0) {\n            details.aggregate(masked._appendPlaceholder(stop));\n          }\n\n          chunkBlock = chunk instanceof ChunksTailDetails && masked._blocks[stop];\n        }\n\n        if (chunkBlock) {\n          var tailDetails = chunkBlock.appendTail(chunk);\n          tailDetails.skip = false; // always ignore skip, it will be set on last\n\n          details.aggregate(tailDetails);\n          masked._value += tailDetails.inserted; // get not inserted chars\n\n          var remainChars = chunk.toString().slice(tailDetails.rawInserted.length);\n          if (remainChars) details.aggregate(masked.append(remainChars, {\n            tail: true\n          }));\n        } else {\n          details.aggregate(masked.append(chunk.toString(), {\n            tail: true\n          }));\n        }\n      }\n\n      return details;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return {\n        chunks: this.chunks.map(function (c) {\n          return c.state;\n        }),\n        from: this.from,\n        stop: this.stop,\n        blockIndex: this.blockIndex\n      };\n    },\n    set: function set(state) {\n      var chunks = state.chunks,\n          props = (0, _rollupPluginBabelHelpers67bba7fb.b)(state, _excluded);\n      Object.assign(this, props);\n      this.chunks = chunks.map(function (cstate) {\n        var chunk = \"chunks\" in cstate ? new ChunksTailDetails() : new _continuousTailDetails.default(); // $FlowFixMe already checked above\n\n        chunk.state = cstate;\n        return chunk;\n      });\n    }\n  }, {\n    key: \"unshift\",\n    value: function unshift(beforePos) {\n      if (!this.chunks.length || beforePos != null && this.from >= beforePos) return '';\n      var chunkShiftPos = beforePos != null ? beforePos - this.from : beforePos;\n      var ci = 0;\n\n      while (ci < this.chunks.length) {\n        var chunk = this.chunks[ci];\n        var shiftChar = chunk.unshift(chunkShiftPos);\n\n        if (chunk.toString()) {\n          // chunk still contains value\n          // but not shifted - means no more available chars to shift\n          if (!shiftChar) break;\n          ++ci;\n        } else {\n          // clean if chunk has no value\n          this.chunks.splice(ci, 1);\n        }\n\n        if (shiftChar) return shiftChar;\n      }\n\n      return '';\n    }\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      if (!this.chunks.length) return '';\n      var ci = this.chunks.length - 1;\n\n      while (0 <= ci) {\n        var chunk = this.chunks[ci];\n        var shiftChar = chunk.shift();\n\n        if (chunk.toString()) {\n          // chunk still contains value\n          // but not shifted - means no more available chars to shift\n          if (!shiftChar) break;\n          --ci;\n        } else {\n          // clean if chunk has no value\n          this.chunks.splice(ci, 1);\n        }\n\n        if (shiftChar) return shiftChar;\n      }\n\n      return '';\n    }\n  }]);\n  return ChunksTailDetails;\n}();\n\nexports.default = ChunksTailDetails;"},"sourceMaps":null,"error":null,"hash":"81c1096fa7fa042f0ad1fe61f1f7d2b5","cacheData":{"env":{}}}