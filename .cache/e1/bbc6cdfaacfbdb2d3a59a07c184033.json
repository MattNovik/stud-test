{"id":"coeb","dependencies":[{"name":"C:\\projects\\stud-test\\package.json","includedInParent":true,"mtime":1672148335290},{"name":"C:\\projects\\stud-test\\node_modules\\@mui\\material\\package.json","includedInParent":true,"mtime":1666601429550},{"name":"@babel/runtime/helpers/esm/extends","loc":{"line":1,"column":21,"index":21},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\material\\esm\\styles\\experimental_extendTheme.js","resolved":"C:\\projects\\stud-test\\node_modules\\@babel\\runtime\\helpers\\esm\\extends.js"},{"name":"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose","loc":{"line":2,"column":42,"index":101},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\material\\esm\\styles\\experimental_extendTheme.js","resolved":"C:\\projects\\stud-test\\node_modules\\@babel\\runtime\\helpers\\esm\\objectWithoutPropertiesLoose.js"},{"name":"@mui/utils","loc":{"line":5,"column":26,"index":270},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\material\\esm\\styles\\experimental_extendTheme.js","resolved":"C:\\projects\\stud-test\\node_modules\\@mui\\utils\\esm\\index.js"},{"name":"@mui/system","loc":{"line":6,"column":115,"index":399},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\material\\esm\\styles\\experimental_extendTheme.js","resolved":"C:\\projects\\stud-test\\node_modules\\@mui\\system\\esm\\index.js"},{"name":"./createTheme","loc":{"line":7,"column":35,"index":449},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\material\\esm\\styles\\experimental_extendTheme.js","resolved":"C:\\projects\\stud-test\\node_modules\\@mui\\material\\esm\\styles\\createTheme.js"},{"name":"../Paper/Paper","loc":{"line":8,"column":32,"index":498},"parent":"C:\\projects\\stud-test\\node_modules\\@mui\\material\\esm\\styles\\experimental_extendTheme.js","resolved":"C:\\projects\\stud-test\\node_modules\\@mui\\material\\esm\\Paper\\Paper.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createGetCssVar = void 0;\nexports.default = extendTheme;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\"));\n\nvar _utils = require(\"@mui/utils\");\n\nvar _system = require(\"@mui/system\");\n\nvar _createTheme = _interopRequireDefault(require(\"./createTheme\"));\n\nvar _Paper = require(\"../Paper/Paper\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _excluded = [\"colorSchemes\", \"cssVarPrefix\"],\n    _excluded2 = [\"palette\"];\n\nvar defaultDarkOverlays = _toConsumableArray(Array(25)).map(function (_, index) {\n  if (index === 0) {\n    return undefined;\n  }\n\n  var overlay = (0, _Paper.getOverlayAlpha)(index);\n  return \"linear-gradient(rgba(255 255 255 / \".concat(overlay, \"), rgba(255 255 255 / \").concat(overlay, \"))\");\n});\n\nfunction assignNode(obj, keys) {\n  keys.forEach(function (k) {\n    if (!obj[k]) {\n      obj[k] = {};\n    }\n  });\n}\n\nfunction setColor(obj, key, defaultValue) {\n  obj[key] = obj[key] || defaultValue;\n}\n\nvar createGetCssVar = function createGetCssVar() {\n  var cssVarPrefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'mui';\n  return (0, _system.unstable_createGetCssVar)(cssVarPrefix);\n};\n\nexports.createGetCssVar = createGetCssVar;\n\nfunction extendTheme() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _colorSchemesInput$li, _colorSchemesInput$da, _colorSchemesInput$li2, _colorSchemesInput$li3, _colorSchemesInput$da2, _colorSchemesInput$da3;\n\n  var _options$colorSchemes = options.colorSchemes,\n      colorSchemesInput = _options$colorSchemes === void 0 ? {} : _options$colorSchemes,\n      _options$cssVarPrefix = options.cssVarPrefix,\n      cssVarPrefix = _options$cssVarPrefix === void 0 ? 'mui' : _options$cssVarPrefix,\n      input = (0, _objectWithoutPropertiesLoose2.default)(options, _excluded);\n  var getCssVar = createGetCssVar(cssVarPrefix);\n\n  var _createThemeWithoutVa = (0, _createTheme.default)((0, _extends2.default)({}, input, colorSchemesInput.light && {\n    palette: (_colorSchemesInput$li = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li.palette\n  })),\n      lightPalette = _createThemeWithoutVa.palette,\n      muiTheme = (0, _objectWithoutPropertiesLoose2.default)(_createThemeWithoutVa, _excluded2);\n\n  var _createThemeWithoutVa2 = (0, _createTheme.default)({\n    palette: (0, _extends2.default)({\n      mode: 'dark'\n    }, (_colorSchemesInput$da = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da.palette)\n  }),\n      darkPalette = _createThemeWithoutVa2.palette;\n\n  var theme = (0, _extends2.default)({}, muiTheme, {\n    cssVarPrefix: cssVarPrefix,\n    getCssVar: getCssVar,\n    colorSchemes: (0, _extends2.default)({}, colorSchemesInput, {\n      light: (0, _extends2.default)({}, colorSchemesInput.light, {\n        palette: lightPalette,\n        opacity: (0, _extends2.default)({\n          inputPlaceholder: 0.42,\n          inputUnderline: 0.42,\n          switchTrackDisabled: 0.12,\n          switchTrack: 0.38\n        }, (_colorSchemesInput$li2 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li2.opacity),\n        overlays: ((_colorSchemesInput$li3 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li3.overlays) || []\n      }),\n      dark: (0, _extends2.default)({}, colorSchemesInput.dark, {\n        palette: darkPalette,\n        opacity: (0, _extends2.default)({\n          inputPlaceholder: 0.5,\n          inputUnderline: 0.7,\n          switchTrackDisabled: 0.2,\n          switchTrack: 0.3\n        }, (_colorSchemesInput$da2 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da2.opacity),\n        overlays: ((_colorSchemesInput$da3 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da3.overlays) || defaultDarkOverlays\n      })\n    })\n  });\n  Object.keys(theme.colorSchemes).forEach(function (key) {\n    var palette = theme.colorSchemes[key].palette; // attach black & white channels to common node\n\n    if (key === 'light') {\n      setColor(palette.common, 'background', '#fff');\n      setColor(palette.common, 'onBackground', '#000');\n    } else {\n      setColor(palette.common, 'background', '#000');\n      setColor(palette.common, 'onBackground', '#fff');\n    } // assign component variables\n\n\n    assignNode(palette, ['Alert', 'AppBar', 'Avatar', 'Chip', 'FilledInput', 'LinearProgress', 'Skeleton', 'Slider', 'SnackbarContent', 'SpeedDialAction', 'StepConnector', 'StepContent', 'Switch', 'TableCell', 'Tooltip']);\n\n    if (key === 'light') {\n      setColor(palette.Alert, 'errorColor', (0, _system.darken)(palette.error.light, 0.6));\n      setColor(palette.Alert, 'infoColor', (0, _system.darken)(palette.info.light, 0.6));\n      setColor(palette.Alert, 'successColor', (0, _system.darken)(palette.success.light, 0.6));\n      setColor(palette.Alert, 'warningColor', (0, _system.darken)(palette.warning.light, 0.6));\n      setColor(palette.Alert, 'errorFilledBg', getCssVar('palette-error-main'));\n      setColor(palette.Alert, 'infoFilledBg', getCssVar('palette-info-main'));\n      setColor(palette.Alert, 'successFilledBg', getCssVar('palette-success-main'));\n      setColor(palette.Alert, 'warningFilledBg', getCssVar('palette-warning-main'));\n      setColor(palette.Alert, 'errorFilledColor', lightPalette.getContrastText(palette.error.main));\n      setColor(palette.Alert, 'infoFilledColor', lightPalette.getContrastText(palette.info.main));\n      setColor(palette.Alert, 'successFilledColor', lightPalette.getContrastText(palette.success.main));\n      setColor(palette.Alert, 'warningFilledColor', lightPalette.getContrastText(palette.warning.main));\n      setColor(palette.Alert, 'errorStandardBg', (0, _system.lighten)(palette.error.light, 0.9));\n      setColor(palette.Alert, 'infoStandardBg', (0, _system.lighten)(palette.info.light, 0.9));\n      setColor(palette.Alert, 'successStandardBg', (0, _system.lighten)(palette.success.light, 0.9));\n      setColor(palette.Alert, 'warningStandardBg', (0, _system.lighten)(palette.warning.light, 0.9));\n      setColor(palette.Alert, 'errorIconColor', getCssVar('palette-error-light'));\n      setColor(palette.Alert, 'infoIconColor', getCssVar('palette-info-light'));\n      setColor(palette.Alert, 'successIconColor', getCssVar('palette-success-light'));\n      setColor(palette.Alert, 'warningIconColor', getCssVar('palette-warning-light'));\n      setColor(palette.AppBar, 'defaultBg', getCssVar('palette-grey-100'));\n      setColor(palette.Avatar, 'defaultBg', getCssVar('palette-grey-400'));\n      setColor(palette.Chip, 'defaultBorder', getCssVar('palette-grey-400'));\n      setColor(palette.Chip, 'defaultAvatarColor', getCssVar('palette-grey-700'));\n      setColor(palette.Chip, 'defaultIconColor', getCssVar('palette-grey-700'));\n      setColor(palette.FilledInput, 'bg', 'rgba(0, 0, 0, 0.06)');\n      setColor(palette.FilledInput, 'hoverBg', 'rgba(0, 0, 0, 0.09)');\n      setColor(palette.FilledInput, 'disabledBg', 'rgba(0, 0, 0, 0.12)');\n      setColor(palette.LinearProgress, 'primaryBg', (0, _system.lighten)(palette.primary.main, 0.62));\n      setColor(palette.LinearProgress, 'secondaryBg', (0, _system.lighten)(palette.secondary.main, 0.62));\n      setColor(palette.LinearProgress, 'errorBg', (0, _system.lighten)(palette.error.main, 0.62));\n      setColor(palette.LinearProgress, 'infoBg', (0, _system.lighten)(palette.info.main, 0.62));\n      setColor(palette.LinearProgress, 'successBg', (0, _system.lighten)(palette.success.main, 0.62));\n      setColor(palette.LinearProgress, 'warningBg', (0, _system.lighten)(palette.warning.main, 0.62));\n      setColor(palette.Skeleton, 'bg', \"rgba(\".concat(getCssVar('palette-text-primaryChannel'), \" / 0.11)\"));\n      setColor(palette.Slider, 'primaryTrack', (0, _system.lighten)(palette.primary.main, 0.62));\n      setColor(palette.Slider, 'secondaryTrack', (0, _system.lighten)(palette.secondary.main, 0.62));\n      setColor(palette.Slider, 'errorTrack', (0, _system.lighten)(palette.error.main, 0.62));\n      setColor(palette.Slider, 'infoTrack', (0, _system.lighten)(palette.info.main, 0.62));\n      setColor(palette.Slider, 'successTrack', (0, _system.lighten)(palette.success.main, 0.62));\n      setColor(palette.Slider, 'warningTrack', (0, _system.lighten)(palette.warning.main, 0.62));\n      var snackbarContentBackground = (0, _system.emphasize)(palette.background.default, 0.8);\n      setColor(palette.SnackbarContent, 'bg', snackbarContentBackground);\n      setColor(palette.SnackbarContent, 'color', lightPalette.getContrastText(snackbarContentBackground));\n      setColor(palette.SpeedDialAction, 'fabHoverBg', (0, _system.emphasize)(palette.background.paper, 0.15));\n      setColor(palette.StepConnector, 'border', getCssVar('palette-grey-400'));\n      setColor(palette.StepContent, 'border', getCssVar('palette-grey-400'));\n      setColor(palette.Switch, 'defaultColor', getCssVar('palette-common-white'));\n      setColor(palette.Switch, 'defaultDisabledColor', getCssVar('palette-grey-100'));\n      setColor(palette.Switch, 'primaryDisabledColor', (0, _system.lighten)(palette.primary.main, 0.62));\n      setColor(palette.Switch, 'secondaryDisabledColor', (0, _system.lighten)(palette.secondary.main, 0.62));\n      setColor(palette.Switch, 'errorDisabledColor', (0, _system.lighten)(palette.error.main, 0.62));\n      setColor(palette.Switch, 'infoDisabledColor', (0, _system.lighten)(palette.info.main, 0.62));\n      setColor(palette.Switch, 'successDisabledColor', (0, _system.lighten)(palette.success.main, 0.62));\n      setColor(palette.Switch, 'warningDisabledColor', (0, _system.lighten)(palette.warning.main, 0.62));\n      setColor(palette.TableCell, 'border', (0, _system.lighten)((0, _system.alpha)(palette.divider, 1), 0.88));\n      setColor(palette.Tooltip, 'bg', (0, _system.alpha)(palette.grey[700], 0.92));\n    } else {\n      setColor(palette.Alert, 'errorColor', (0, _system.lighten)(palette.error.light, 0.6));\n      setColor(palette.Alert, 'infoColor', (0, _system.lighten)(palette.info.light, 0.6));\n      setColor(palette.Alert, 'successColor', (0, _system.lighten)(palette.success.light, 0.6));\n      setColor(palette.Alert, 'warningColor', (0, _system.lighten)(palette.warning.light, 0.6));\n      setColor(palette.Alert, 'errorFilledBg', getCssVar('palette-error-dark'));\n      setColor(palette.Alert, 'infoFilledBg', getCssVar('palette-info-dark'));\n      setColor(palette.Alert, 'successFilledBg', getCssVar('palette-success-dark'));\n      setColor(palette.Alert, 'warningFilledBg', getCssVar('palette-warning-dark'));\n      setColor(palette.Alert, 'errorFilledColor', darkPalette.getContrastText(palette.error.dark));\n      setColor(palette.Alert, 'infoFilledColor', darkPalette.getContrastText(palette.info.dark));\n      setColor(palette.Alert, 'successFilledColor', darkPalette.getContrastText(palette.success.dark));\n      setColor(palette.Alert, 'warningFilledColor', darkPalette.getContrastText(palette.warning.dark));\n      setColor(palette.Alert, 'errorStandardBg', (0, _system.darken)(palette.error.light, 0.9));\n      setColor(palette.Alert, 'infoStandardBg', (0, _system.darken)(palette.info.light, 0.9));\n      setColor(palette.Alert, 'successStandardBg', (0, _system.darken)(palette.success.light, 0.9));\n      setColor(palette.Alert, 'warningStandardBg', (0, _system.darken)(palette.warning.light, 0.9));\n      setColor(palette.Alert, 'errorIconColor', getCssVar('palette-error-main'));\n      setColor(palette.Alert, 'infoIconColor', getCssVar('palette-info-main'));\n      setColor(palette.Alert, 'successIconColor', getCssVar('palette-success-main'));\n      setColor(palette.Alert, 'warningIconColor', getCssVar('palette-warning-main'));\n      setColor(palette.AppBar, 'defaultBg', getCssVar('palette-grey-900'));\n      setColor(palette.AppBar, 'darkBg', getCssVar('palette-background-paper')); // specific for dark mode\n\n      setColor(palette.AppBar, 'darkColor', getCssVar('palette-text-primary')); // specific for dark mode\n\n      setColor(palette.Avatar, 'defaultBg', getCssVar('palette-grey-600'));\n      setColor(palette.Chip, 'defaultBorder', getCssVar('palette-grey-700'));\n      setColor(palette.Chip, 'defaultAvatarColor', getCssVar('palette-grey-300'));\n      setColor(palette.Chip, 'defaultIconColor', getCssVar('palette-grey-300'));\n      setColor(palette.FilledInput, 'bg', 'rgba(255, 255, 255, 0.09)');\n      setColor(palette.FilledInput, 'hoverBg', 'rgba(255, 255, 255, 0.13)');\n      setColor(palette.FilledInput, 'disabledBg', 'rgba(255, 255, 255, 0.12)');\n      setColor(palette.LinearProgress, 'primaryBg', (0, _system.darken)(palette.primary.main, 0.5));\n      setColor(palette.LinearProgress, 'secondaryBg', (0, _system.darken)(palette.secondary.main, 0.5));\n      setColor(palette.LinearProgress, 'errorBg', (0, _system.darken)(palette.error.main, 0.5));\n      setColor(palette.LinearProgress, 'infoBg', (0, _system.darken)(palette.info.main, 0.5));\n      setColor(palette.LinearProgress, 'successBg', (0, _system.darken)(palette.success.main, 0.5));\n      setColor(palette.LinearProgress, 'warningBg', (0, _system.darken)(palette.warning.main, 0.5));\n      setColor(palette.Skeleton, 'bg', \"rgba(\".concat(getCssVar('palette-text-primaryChannel'), \" / 0.13)\"));\n      setColor(palette.Slider, 'primaryTrack', (0, _system.darken)(palette.primary.main, 0.5));\n      setColor(palette.Slider, 'secondaryTrack', (0, _system.darken)(palette.secondary.main, 0.5));\n      setColor(palette.Slider, 'errorTrack', (0, _system.darken)(palette.error.main, 0.5));\n      setColor(palette.Slider, 'infoTrack', (0, _system.darken)(palette.info.main, 0.5));\n      setColor(palette.Slider, 'successTrack', (0, _system.darken)(palette.success.main, 0.5));\n      setColor(palette.Slider, 'warningTrack', (0, _system.darken)(palette.warning.main, 0.5));\n\n      var _snackbarContentBackground = (0, _system.emphasize)(palette.background.default, 0.98);\n\n      setColor(palette.SnackbarContent, 'bg', _snackbarContentBackground);\n      setColor(palette.SnackbarContent, 'color', darkPalette.getContrastText(_snackbarContentBackground));\n      setColor(palette.SpeedDialAction, 'fabHoverBg', (0, _system.emphasize)(palette.background.paper, 0.15));\n      setColor(palette.StepConnector, 'border', getCssVar('palette-grey-600'));\n      setColor(palette.StepContent, 'border', getCssVar('palette-grey-600'));\n      setColor(palette.Switch, 'defaultColor', getCssVar('palette-grey-300'));\n      setColor(palette.Switch, 'defaultDisabledColor', getCssVar('palette-grey-600'));\n      setColor(palette.Switch, 'primaryDisabledColor', (0, _system.darken)(palette.primary.main, 0.55));\n      setColor(palette.Switch, 'secondaryDisabledColor', (0, _system.darken)(palette.secondary.main, 0.55));\n      setColor(palette.Switch, 'errorDisabledColor', (0, _system.darken)(palette.error.main, 0.55));\n      setColor(palette.Switch, 'infoDisabledColor', (0, _system.darken)(palette.info.main, 0.55));\n      setColor(palette.Switch, 'successDisabledColor', (0, _system.darken)(palette.success.main, 0.55));\n      setColor(palette.Switch, 'warningDisabledColor', (0, _system.darken)(palette.warning.main, 0.55));\n      setColor(palette.TableCell, 'border', (0, _system.darken)((0, _system.alpha)(palette.divider, 1), 0.68));\n      setColor(palette.Tooltip, 'bg', (0, _system.alpha)(palette.grey[700], 0.92));\n    }\n\n    palette.common.backgroundChannel = (0, _system.colorChannel)(palette.common.background);\n    palette.common.onBackgroundChannel = (0, _system.colorChannel)(palette.common.onBackground);\n    palette.dividerChannel = (0, _system.colorChannel)(palette.divider);\n    Object.keys(palette).forEach(function (color) {\n      var colors = palette[color]; // Color palettes: primary, secondary, error, info, success, and warning\n\n      if (colors.main) {\n        palette[color].mainChannel = (0, _system.colorChannel)(colors.main);\n      }\n\n      if (colors.light) {\n        palette[color].lightChannel = (0, _system.colorChannel)(colors.light);\n      }\n\n      if (colors.dark) {\n        palette[color].darkChannel = (0, _system.colorChannel)(colors.dark);\n      }\n\n      if (colors.contrastText) {\n        palette[color].contrastTextChannel = (0, _system.colorChannel)(colors.contrastText);\n      } // Text colors: text.primary, text.secondary\n\n\n      if (colors.primary) {\n        palette[color].primaryChannel = (0, _system.colorChannel)(colors.primary);\n      }\n\n      if (colors.secondary) {\n        palette[color].secondaryChannel = (0, _system.colorChannel)(colors.secondary);\n      } // Action colors: action.active, action.selected\n\n\n      if (colors.active) {\n        palette[color].activeChannel = (0, _system.colorChannel)(colors.active);\n      }\n\n      if (colors.selected) {\n        palette[color].selectedChannel = (0, _system.colorChannel)(colors.selected);\n      }\n    });\n  });\n\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  theme = args.reduce(function (acc, argument) {\n    return (0, _utils.deepmerge)(acc, argument);\n  }, theme);\n  return theme;\n}"},"sourceMaps":null,"error":null,"hash":"2945be942f22d056338151a2c9dd6884","cacheData":{"env":{}}}