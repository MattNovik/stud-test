{"id":"tbPS","dependencies":[{"name":"C:\\projects\\stud-test\\package.json","includedInParent":true,"mtime":1672148335290},{"name":"C:\\projects\\stud-test\\node_modules\\react-imask\\package.json","includedInParent":true,"mtime":1666601412339},{"name":"./_rollupPluginBabelHelpers-089ae9b3.js","loc":{"line":1,"column":120,"index":120},"parent":"C:\\projects\\stud-test\\node_modules\\react-imask\\esm\\mixin.js","resolved":"C:\\projects\\stud-test\\node_modules\\react-imask\\esm\\_rollupPluginBabelHelpers-089ae9b3.js"},{"name":"react","loc":{"line":2,"column":18,"index":181},"parent":"C:\\projects\\stud-test\\node_modules\\react-imask\\esm\\mixin.js","resolved":"C:\\projects\\stud-test\\node_modules\\react\\index.js"},{"name":"prop-types","loc":{"line":3,"column":22,"index":212},"parent":"C:\\projects\\stud-test\\node_modules\\react-imask\\esm\\mixin.js","resolved":"C:\\projects\\stud-test\\node_modules\\prop-types\\index.js"},{"name":"imask/esm/imask","loc":{"line":4,"column":18,"index":244},"parent":"C:\\projects\\stud-test\\node_modules\\react-imask\\esm\\mixin.js","resolved":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\imask.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = IMaskMixin;\n\nvar _rollupPluginBabelHelpers089ae9b = require(\"./_rollupPluginBabelHelpers-089ae9b3.js\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _imask = _interopRequireDefault(require(\"imask/esm/imask\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MASK_PROPS = {\n  // common\n  mask: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.func, _propTypes.default.string, _propTypes.default.instanceOf(RegExp), _propTypes.default.oneOf([Date, Number, _imask.default.Masked]), _propTypes.default.instanceOf(_imask.default.Masked)]),\n  value: _propTypes.default.any,\n  unmask: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['typed'])]),\n  prepare: _propTypes.default.func,\n  validate: _propTypes.default.func,\n  commit: _propTypes.default.func,\n  overwrite: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['shift'])]),\n  eager: _propTypes.default.bool,\n  // events\n  onAccept: _propTypes.default.func,\n  onComplete: _propTypes.default.func,\n  // pattern\n  placeholderChar: _propTypes.default.string,\n  lazy: _propTypes.default.bool,\n  definitions: _propTypes.default.object,\n  blocks: _propTypes.default.object,\n  // date\n  pattern: _propTypes.default.string,\n  format: _propTypes.default.func,\n  parse: _propTypes.default.func,\n  autofix: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['pad'])]),\n  // number\n  radix: _propTypes.default.string,\n  thousandsSeparator: _propTypes.default.string,\n  mapToRadix: _propTypes.default.arrayOf(_propTypes.default.string),\n  scale: _propTypes.default.number,\n  signed: _propTypes.default.bool,\n  normalizeZeros: _propTypes.default.bool,\n  padFractionalZeros: _propTypes.default.bool,\n  min: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.instanceOf(Date)]),\n  max: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.instanceOf(Date)]),\n  // dynamic\n  dispatch: _propTypes.default.func,\n  // ref\n  inputRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({\n    current: _propTypes.default.object\n  })])\n};\nvar MASK_PROPS_NAMES = Object.keys(MASK_PROPS);\nvar NON_MASK_OPTIONS_PROPS_NAMES = ['value', 'unmask', 'onAccept', 'onComplete', 'inputRef'];\nvar MASK_OPTIONS_PROPS_NAMES = MASK_PROPS_NAMES.filter(function (pName) {\n  return NON_MASK_OPTIONS_PROPS_NAMES.indexOf(pName) < 0;\n}); // TODO\n// 1. seems like it's wrong to have Opts as only mask options. Other component/input props should also be there. Where is \"unmask\" prop for instance?\n// 2. Unmask should be infered from Opts (see https://github.com/uNmAnNeR/imaskjs/issues/554#issuecomment-1114014010)\n\nfunction IMaskMixin(ComposedComponent) {\n  var MaskedComponent = /*#__PURE__*/function (_React$Component) {\n    (0, _rollupPluginBabelHelpers089ae9b.a)(MaskedComponent, _React$Component);\n\n    var _super = (0, _rollupPluginBabelHelpers089ae9b.b)(MaskedComponent);\n\n    function MaskedComponent(props) {\n      var _this;\n\n      (0, _rollupPluginBabelHelpers089ae9b.d)(this, MaskedComponent);\n      _this = _super.call(this, props);\n      _this._inputRef = _this._inputRef.bind((0, _rollupPluginBabelHelpers089ae9b.e)(_this));\n      return _this;\n    }\n\n    (0, _rollupPluginBabelHelpers089ae9b.c)(MaskedComponent, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        if (!this.props.mask) return;\n        this.initMask();\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var props = this.props;\n\n        var maskOptions = this._extractMaskOptionsFromProps(props);\n\n        if (maskOptions.mask) {\n          if (this.maskRef) {\n            this.maskRef.updateOptions(maskOptions);\n            if ('value' in props) this.maskValue = props.value;\n          } else {\n            this.initMask(maskOptions);\n          }\n        } else {\n          this.destroyMask();\n          if ('value' in props) this.element.value = props.value;\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.destroyMask();\n      }\n    }, {\n      key: \"_inputRef\",\n      value: function _inputRef(el) {\n        this.element = el;\n\n        if (this.props.inputRef) {\n          if (Object.prototype.hasOwnProperty.call(this.props.inputRef, 'current')) this.props.inputRef.current = el;else this.props.inputRef(el);\n        }\n      }\n    }, {\n      key: \"initMask\",\n      value: function initMask() {\n        var maskOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._extractMaskOptionsFromProps(this.props);\n        this.maskRef = (0, _imask.default)(this.element, maskOptions).on('accept', this._onAccept.bind(this)).on('complete', this._onComplete.bind(this));\n        if ('value' in this.props) this.maskValue = this.props.value;\n      }\n    }, {\n      key: \"destroyMask\",\n      value: function destroyMask() {\n        if (this.maskRef) {\n          this.maskRef.destroy();\n          delete this.maskRef;\n        }\n      }\n    }, {\n      key: \"_extractMaskOptionsFromProps\",\n      value: function _extractMaskOptionsFromProps(props) {\n        var cloneProps = Object.assign({}, props); // keep only mask options props\n\n        Object.keys(cloneProps) // TODO why need cast to string?\n        .filter(function (prop) {\n          return MASK_OPTIONS_PROPS_NAMES.indexOf(prop) < 0;\n        }).forEach(function (nonMaskProp) {\n          delete cloneProps[nonMaskProp];\n        });\n        return cloneProps;\n      }\n    }, {\n      key: \"_extractNonMaskProps\",\n      value: function _extractNonMaskProps(props) {\n        var cloneProps = Object.assign({}, props);\n        MASK_PROPS_NAMES.forEach(function (maskProp) {\n          delete cloneProps[maskProp];\n        });\n        return cloneProps;\n      }\n    }, {\n      key: \"maskValue\",\n      get: function get() {\n        if (this.props.unmask === 'typed') return this.maskRef.typedValue;\n        if (this.props.unmask) return this.maskRef.unmaskedValue;\n        return this.maskRef.value;\n      },\n      set: function set(value) {\n        value = value == null ? '' : value;\n        if (this.props.unmask === 'typed') this.maskRef.typedValue = value;else if (this.props.unmask) this.maskRef.unmaskedValue = value;else this.maskRef.value = value;\n      }\n    }, {\n      key: \"_onAccept\",\n      value: function _onAccept(e) {\n        if (this.props.onAccept && this.maskRef) this.props.onAccept(this.maskValue, this.maskRef, e);\n      }\n    }, {\n      key: \"_onComplete\",\n      value: function _onComplete(e) {\n        if (this.props.onComplete && this.maskRef) this.props.onComplete(this.maskValue, this.maskRef, e);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return _react.default.createElement(ComposedComponent, Object.assign({}, this._extractNonMaskProps(this.props), {\n          inputRef: this._inputRef\n        }));\n      }\n    }]);\n    return MaskedComponent;\n  }(_react.default.Component);\n\n  var nestedComponentName = ComposedComponent.displayName || ComposedComponent.name || 'Component';\n  MaskedComponent.displayName = \"IMask(\".concat(nestedComponentName, \")\");\n  MaskedComponent.propTypes = MASK_PROPS;\n  return MaskedComponent;\n}"},"sourceMaps":null,"error":null,"hash":"b5da13b91b1c376166cf96f416cda070","cacheData":{"env":{}}}