{"id":"YjUK","dependencies":[{"name":"C:\\projects\\stud-test\\package.json","includedInParent":true,"mtime":1672148335290},{"name":"C:\\projects\\stud-test\\node_modules\\imask\\package.json","includedInParent":true,"mtime":1666601416569},{"name":"../../_rollupPluginBabelHelpers-67bba7fb.js","loc":{"line":1,"column":56,"index":56},"parent":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\masked\\pattern\\fixed-definition.js","resolved":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\_rollupPluginBabelHelpers-67bba7fb.js"},{"name":"../../core/change-details.js","loc":{"line":2,"column":26,"index":129},"parent":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\masked\\pattern\\fixed-definition.js","resolved":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\core\\change-details.js"},{"name":"../../core/utils.js","loc":{"line":3,"column":36,"index":197},"parent":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\masked\\pattern\\fixed-definition.js","resolved":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\core\\utils.js"},{"name":"../../core/continuous-tail-details.js","loc":{"line":4,"column":34,"index":254},"parent":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\masked\\pattern\\fixed-definition.js","resolved":"C:\\projects\\stud-test\\node_modules\\imask\\esm\\core\\continuous-tail-details.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rollupPluginBabelHelpers67bba7fb = require(\"../../_rollupPluginBabelHelpers-67bba7fb.js\");\n\nvar _changeDetails = _interopRequireDefault(require(\"../../core/change-details.js\"));\n\nvar _utils = require(\"../../core/utils.js\");\n\nvar _continuousTailDetails = _interopRequireDefault(require(\"../../core/continuous-tail-details.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar PatternFixedDefinition = /*#__PURE__*/function () {\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n  function PatternFixedDefinition(opts) {\n    (0, _rollupPluginBabelHelpers67bba7fb.a)(this, PatternFixedDefinition);\n    Object.assign(this, opts);\n    this._value = '';\n    this.isFixed = true;\n  }\n\n  (0, _rollupPluginBabelHelpers67bba7fb._)(PatternFixedDefinition, [{\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n  }, {\n    key: \"unmaskedValue\",\n    get: function get() {\n      return this.isUnmasking ? this.value : '';\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._isRawInput = false;\n      this._value = '';\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._value.length;\n      this._value = this._value.slice(0, fromPos) + this._value.slice(toPos);\n      if (!this._value) this._isRawInput = false;\n      return new _changeDetails.default();\n    }\n  }, {\n    key: \"nearestInputPos\",\n    value: function nearestInputPos(cursorPos) {\n      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _utils.DIRECTION.NONE;\n      var minPos = 0;\n      var maxPos = this._value.length;\n\n      switch (direction) {\n        case _utils.DIRECTION.LEFT:\n        case _utils.DIRECTION.FORCE_LEFT:\n          return minPos;\n\n        case _utils.DIRECTION.NONE:\n        case _utils.DIRECTION.RIGHT:\n        case _utils.DIRECTION.FORCE_RIGHT:\n        default:\n          return maxPos;\n      }\n    }\n  }, {\n    key: \"extractInput\",\n    value: function extractInput() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._value.length;\n      var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return flags.raw && this._isRawInput && this._value.slice(fromPos, toPos) || '';\n    }\n  }, {\n    key: \"isComplete\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"isFilled\",\n    get: function get() {\n      return Boolean(this._value);\n    }\n  }, {\n    key: \"_appendChar\",\n    value: function _appendChar(ch) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var details = new _changeDetails.default();\n      if (this._value) return details;\n      var appended = this.char === ch;\n      var isResolved = appended && (this.isUnmasking || flags.input || flags.raw) && (!flags.raw || !this.eager) && !flags.tail;\n      if (isResolved) details.rawInserted = this.char;\n      this._value = details.inserted = this.char;\n      this._isRawInput = isResolved && (flags.raw || flags.input);\n      return details;\n    }\n  }, {\n    key: \"_appendEager\",\n    value: function _appendEager() {\n      return this._appendChar(this.char, {\n        tail: true\n      });\n    }\n  }, {\n    key: \"_appendPlaceholder\",\n    value: function _appendPlaceholder() {\n      var details = new _changeDetails.default();\n      if (this._value) return details;\n      this._value = details.inserted = this.char;\n      return details;\n    }\n  }, {\n    key: \"extractTail\",\n    value: function extractTail() {\n      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      return new _continuousTailDetails.default('');\n    } // $FlowFixMe no ideas\n\n  }, {\n    key: \"appendTail\",\n    value: function appendTail(tail) {\n      if ((0, _utils.isString)(tail)) tail = new _continuousTailDetails.default(String(tail));\n      return tail.appendTo(this);\n    }\n  }, {\n    key: \"append\",\n    value: function append(str, flags, tail) {\n      var details = this._appendChar(str[0], flags);\n\n      if (tail != null) {\n        details.tailShift += this.appendTail(tail).tailShift;\n      }\n\n      return details;\n    }\n  }, {\n    key: \"doCommit\",\n    value: function doCommit() {}\n  }, {\n    key: \"state\",\n    get: function get() {\n      return {\n        _value: this._value,\n        _isRawInput: this._isRawInput\n      };\n    },\n    set: function set(state) {\n      Object.assign(this, state);\n    }\n  }]);\n  return PatternFixedDefinition;\n}();\n\nexports.default = PatternFixedDefinition;"},"sourceMaps":null,"error":null,"hash":"274a15d768622299258f2bf976d527bb","cacheData":{"env":{}}}